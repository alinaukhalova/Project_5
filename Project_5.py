#!/usr/bin/env python
# coding: utf-8

# # Исследование успешности компьютерных игр для интернет-магазина «Стримчик»

# В нашем распоряжении доступны исторические данные (а именно до 2016 года) взятые из открытых источников, в которых указано  имя игр, год выпуска, информация о продажах компьютерных игр в Северной Америке, Европе, Японии и других странах, их оценке пользователями и экспертами, их жанры, платформы и рейтинги. Нам нужно исследовать и выявить закономерности, которые влияют на успешность игры на различных платформах. Благодаря этому мы сможем сделать ставку на потенциально популярный продукт и спланировать рекламные кампании на 2017 год. 
#    
# Для этого, начать стоит с изучения и предобработки имеющихся данных. Это необходимо для более точных расчетов в будущем, и тем самым, более точных прогонозов. После, провести исследовательский анализ данных, а именно, выделить самые популярные платформы и жанры игр в различных регионах мира, установить актуальный период анализа, выяснить какие факторы сказываются на продажах игр, произвести сравнение самых популярных платформ для выявления самой перспективной на 2017 год и в завершении, проверить несколько гипотез. Все это поможет нам более точно увидеть сложившуюся картину в мире игр и сделать прогноз.

# ### Шаг 1. Открываем файл с данными и изучаем общую информацию

# In[299]:


import pandas as pd


# In[300]:


import matplotlib.pyplot as plt


# In[301]:


import seaborn as sns


# In[302]:


import numpy as np


# In[303]:


import scipy.stats as st


# In[304]:


games = pd.read_csv('games.csv')


# In[305]:


display(games.head(10))
games.info() 


# В исходном датафрейме отображены названия игр, их платформы, год выпуска, жанр, продажи в разных частях света, оценка игр от критиков и пользователей, а также рейтинг игры от организации ESRB.   

# In[306]:


print(games['Rating'].unique())


# Для нашего удобства, давайте расшифруем значения рейтинга от ассоциации 'Entertainment Software Rating Board':  
#    
# -'EC' - («Early childhood») — **«Для детей младшего возраста»:** Игра подходит для детей от 3 лет и не содержит материалов, которые родители могли бы счесть неподходящими. Продукты, получившие данный рейтинг, изначально разрабатываются для детей и обычно представляют собой развивающие игры.   
# -'E' - («Everyone») — **«Для всех»**: Подходит для всех возрастных категорий. Игра не должна содержать звуков или изображений, которые могут напугать маленьких детей. Не должна использоваться ненормативная лексика. Первоначальное название **"K-A"** ("Kids to Adults").   
# -'E10+' - («Everyone 10 and older») — **«Для всех от 10 лет и старше»**: Подходит для лиц старше 10 лет. Игра может содержать умеренные формы насилия, а некоторые сцены могут пугать детей.    
# -'T' - («Teen») — **«Подросткам»:**  Подходит для лиц старше 13 лет. Игра может содержать более реалистичные и натуралистические сцены насилия.   
# -'M' - («Mature») — **«Для взрослых»:** Подходит для лиц старше 17 лет. Этот рейтинг используется, когда насилие становится реалистичным и похожим на реальную жизнь. Также может присутствовать ненормативная лексика, употребление табака, алкоголя или запрещенных наркотиков.    
# -'A0' - («Adults Only 18+») — **«Только для взрослых»:** Подходит для взрослых старше 18 лет. Классификация «для взрослых» используется, когда в игре присутствует крайний уровень насилия и немотивированного убийства. Также может присутствовать романтизация наркотиков, азартных игр и сексуальной активности.   
# -'RP' - («Rating Pending») — **«Рейтинг ожидается»:** Категория ещё не присвоена. Играм с категорией RP еще не присвоен окончательный рейтинг ESRB.   
# -'K-A' ("Kids to Adults") - Эти игры ориентированы на различную возраствую категорию. В них могут содержаться минимальное насилие, в основном «мультяшного» характера. Этот рейтинг был заменен в 1997 году на рейтинг 'E'.   
#    
# Т.к. рейтинг 'K-A' можно сказать дублирует рейтинг 'E', то есть смысл заменить его на более новый.

# После изучения общей информации о датафрейме мы можем сказать, что в данных присутсвуют пропуски, которые в дальнейшем необходимо обработать или заменить. Вдобавок, мы можем заметить, что не во всех столбцах используется корректный тип данных. Например: в стобце год релиза необходимо использовать значения типа int, а в столбце, где указана оценка пользователей необходимо тип object поменять на float64.

# ### Шаг 2. Предобработка данных

# In[307]:


print(games.columns) #выведем все наименования столбцов датафрейма


# Заменим названия столбцов, а именно приведем все наименования к нижнему регистру

# In[308]:


games = games.rename(columns={'Name':'name', 'Platform':'platform', 'Year_of_Release':'year_of_release', 
                          'Genre':'genre', 'NA_sales':'na_sales', 'EU_sales':'eu_sales', 'JP_sales':'jp_sales', 
                          'Other_sales':'other_sales', 'Critic_Score':'critic_score', 'User_Score':'user_score', 
                          'Rating':'rating'})
print(games.columns) #проверим наше преобразование


# Проверим на наличие пропусков в данных:

# In[309]:


print(games.isna().sum())


# Удалим две пустые строчки в столбцах 'name' и 'genre', т.к. найти замену в данные пропуски проблематично, и удаленные строчки не окажут сильного влияния на наше исследование.

# In[310]:


games = games.dropna(subset=['name', 'genre'])
games = games.reset_index(drop=True)


# В столбце 'year_of_release' также присутствуют пропуски. Т.к. мы не можем произвести логичную замену, как и в столбцах выше, удалим пустые строчки. Данные пропуски состаляют маленький процент от всего датасета и на дальнейшие вычисления сильно влиять не будут.   
#    
# Наличие пропусков могло произойти из-за невнимательного заполнения данных, или например, отсутствия информации об
# имени игры, ее года выпуска или жанра.

# In[311]:


games = games.dropna(subset=['year_of_release'])
games = games.reset_index(drop=True)


# In[312]:


print(games.isna().sum())


# Рассмотрим столбцы 'critic_score' и 'user_score'. В них довольно таки много пропусков, и их количество состовляет большую долю всего нашего датасета, поэтому эти строчки ни в коем случае нельзя удалять. 
# Но также, заменить данные на медиану не предоставляется возможеным, т.к. нашем случае оценка пользователей и критиков является усредненным значением выборки оценок некоторого количества человек . В связи с этим принимаем решение вместо nan создать 'заглушки' для столбцов 'critic_score' и 'user_score' в виде числа -1  (нереальное значение для рейтингов). Данное действие поможет нам избавиться от пропусков для решения дальнейших задач.

# In[313]:


games['critic_score'] = games['critic_score'].fillna(-1)


# In[314]:


print(games['critic_score'].unique())


# In[315]:


print(games['user_score'].unique())


# In[316]:


print(games['user_score'].value_counts().head())


# Также, после просмотра уникальных значений стобца 'user_score' мы можем заметить значение tbd. Это переводится с английского как to be determined = будет определено. Значит, в этих ячейках еще не проставлен рейтинг. 
# Скорее всего из-за этого значения у нас в стобце стоит тип данных object вместо нужного float. Т.к. оценка пользователей должа выражаться числом, необходимо значение tbd заменить на пустое и впоследствии заполнить данные пропуски медианным значением столбца.

# In[317]:


games['user_score'] = games['user_score'].replace('tbd', np.NaN)


# In[318]:


print(games['user_score'].unique())


# In[319]:


print(games['user_score'].value_counts().head())


# In[320]:


print(games.isna().sum())


# Все верно. К 6605 пропускам в стобце 'user_score' добавились все 2376 значения tbd. И в конечном итоге мы получили 8981 пропусков в столбце.

# In[321]:


games['user_score'] = games['user_score'].fillna(-1) #создадим 'заглушку', для будущих расчетов


# Причины пропусков в столбцах 'critic_score' и 'user_score' могут быть из-за того, что игры достаточно новые и еще не успели получить какую-либо оценку. 

# Теперь рассмотрим стобец 'rating'. Как мы писали ранее, заменим все значения 'K-A' на 'E', т.к. рейтинг 'K-A' это более ранняя версия рейтинга 'E'.

# In[322]:


print(games['rating'].unique())


# In[323]:


games['rating'] = games['rating'].replace('K-A', 'E') # меняем рейтинг 'K-A' на 'E'


# In[324]:


print(games['rating'].unique()) #проверка


# In[325]:


print(games['rating'].value_counts().head())


# Т.к. столбец 'rating' содержит категориальные данные, заменим все пустые значения на заглушку 'unknow'

# In[326]:


games['rating'] = games['rating'].fillna(value='unknow')


# In[327]:


print(games['rating'].unique())


# In[328]:


print(games.isna().sum()) # проверка


# Далее после всех преобразований необходимо изменить данные столбцов на нужный нам тип:

# In[329]:


games.loc[:,'year_of_release'] = games.loc[:,'year_of_release'].astype('int')
games.loc[:,'user_score'] = games.loc[:,'user_score'].astype('float')


# In[330]:


games.info()


# После устранения пропусков, произведем проверку нашего датасета на наличие полных дубликатов. 

# In[331]:


games.duplicated().sum()


# Полных дубликатов в нашем датасете нет, но произведем также проверку на наличие неявных дубликатов (совпадающие по названию, платформе и году релиза одновременно). Название игр может повторяться в силу того, что они могут выходить на разных платформах в разные годы.

# In[332]:


display(games[games.duplicated(['name', 'platform','year_of_release'],keep=False)])


# Как видим, у нас один дубликат. Суммируем продажи и удалим повторяющуюся строчку.

# In[333]:


games.loc[600,'eu_sales']+=0.01 #так мы не потеряем объем продаж


# In[334]:


display(games[games.duplicated(['name', 'platform','year_of_release'],keep=False)])


# In[335]:


games = games.drop_duplicates(subset=['name', 'platform','year_of_release'],keep='first')
games = games.reset_index(drop=True) #удалим неявные дубликаты


# In[336]:


display(games[games.duplicated(['name', 'platform','year_of_release'],keep=False)])


# Добавим суммарные продажи во всех регионах и запишем их в отдельный столбец

# In[337]:


games['all_sales'] = games['na_sales'] + games['eu_sales'] + games['jp_sales'] + games['other_sales']
#суммартное значение продаж игры
print(games['all_sales'].head(5))


# Во 2 шаге работы мы выполнили предобработку исходных данных, чтобы все дальнейшие наши шаги были более точными и более полно отражали наше иссдедование.   
# Снасала мы заменим названия столбцов и привели их к нижнему регистру.   
# После проверили данные на наличие пропусков и выявили их в столбцах: 'name', 'year_of_release', 'genre', 'critic_score',  'user_score' и 'rating'.    
# В первых трех столбцах мы не стали заменять пропусти на какое-либо значение и удалили их т.к. произвести логическую замену невозможно и данные пропуски состаляют маленький процент от всего датасета и на дальнейшие вычисления сильно не влияют.   
# В столбцах 'critic_score' и 'user_score' мы пропуски заменили на медианное значение столбцов, т.к. пропусков много, а удалять такую большую долю данных нельзя. Также, в столбце 'user_score', помимо пропусков имелось значение tbd (to be determined), которое мы сначала преобразовали в пропуски, а после, также заменили на медиану.    
# И наконец, в столбце 'rating' мы заменили все игры с рейтингом 'K-A' на рейтинг 'E', т.к. они оба несут в себе одни и те же характеристи, просто впоследствии времени один рейтинг был заменен другим. И все пропуски мы заменили заглушкой unknow.  
# Также мы поменяли тип данных в столбцах: 'year_of_release' с float на int и в 'user_score' с object на float.
# И в конце добавили столбец с суммарными продажами по каждой игре.

# ### Шаг 3. Исследовательский анализ данных

# **Посмотрим, сколько игр выпускалось в разные годы**

# In[338]:


games_years = games.groupby(['year_of_release'])['name'].count() # сгрупперуем данные по годам и количеству игр, вырущенных в эти годы
print(games_years)


# In[339]:


games.pivot_table(index='year_of_release', values='name', aggfunc='count').plot(grid=True, figsize=(12, 5))
plt.xlabel('Года выпуска игр', fontsize=14)
plt.ylabel('Количество игр', fontsize=14)
plt.title('Динамика выпуска игр', fontsize=14)
plt.show() #посомтрим распределение за все годы
print(games['year_of_release'].describe())


# Необходимо рассмотреть все года релиза игр, чтобы можно было посмотреть по зависимости, когда количество игр увеличивалось, когда уменьшалось, а потом опять увеличивалось. У нас имеется период с 1980 года по 2016. Как видно из данного графика рост выпуска игр начался примерно после 1993 года. До этого игры выпускались, но мало. Больше всего игр было в 2008-2009 годах, а после производство пошло на спад.

# **Посмотрим, как менялись продажи по платформам.**   

# In[340]:


games_sales = games.groupby('platform')[['na_sales', 'eu_sales', 'jp_sales', 'other_sales', 'all_sales']].sum()
display(games_sales.sort_values(by='all_sales', ascending=False))


# Выберем платформы с наибольшими суммарными продажами и построим график распределения по годам. Оставим только первые 18 платформ с самыми большими продажами. Суммарные продажи которых превышают 150 млн проданных копий.

# In[341]:


#создадим список самых продаваемых платформ
games_top_18_sales_platform = games.groupby('platform').agg({'all_sales': 'sum'}).sort_values(by='all_sales', ascending=False).head(18).index.to_list()
print(games_top_18_sales_platform)


# In[342]:


# оставим в выгрузке только пратформы из списка
games_top_sales_platform = games.query(" platform in ['PS2', 'X360', 'PS3', 'Wii', 'DS', 'PS', 'PS4', 'GBA', 'PSP', '3DS', 'PC', 'GB', 'XB', 'NES', 'N64', 'SNES', 'GC', 'XOne'] ")
games_top_sales_platform.pivot_table(index='year_of_release', columns = 'platform', values='all_sales', aggfunc='sum').plot(grid=True, figsize=(16, 7))
plt.xlabel('Год выпуска', fontsize=14)
plt.ylabel('Количество продаж', fontsize=14)
plt.title('Погодовые продажи на топ-платформах', fontsize=14)
plt.show()


# In[343]:


games.query("platform in @games_top_18_sales_platform")


# In[344]:


games.groupby('platform').agg({'all_sales': 'sum'}).sort_values(by='all_sales', ascending=False).head(18).index.to_list()


# На данном графике видно как менялись продажи по 18-ми платформам с самыми большими продажами по годам. Период  указан с 1983 по 2016 года.
# Новые модели можно сказать появлялись почти каждые 5 лет. До 1995 года на рынке можно сказать была 1 или 2 платформы в течении этих лет, и после 1995 года количесво платформ начало расти.
# Далее, можно заметить, что приблизительное время около 2005 года стало очень плодотворным на появление новых платформ которыми впоследиствии пользовались в течении 10 лет. Почти у всех платформ прослеживается тенденция к тому, что в первые годы появления, продажи идут на увеличение, и по прошествии нескольких лет продажи начинают уменьшаться т.к. приближается появление новых платформ. Так что, можно сказать, что исчезновение старых платформ идет постепенно с возникновением новых.

# Попробуем получить примерный срок жизни платформ

# In[345]:


max_year = games_top_sales_platform.groupby(['platform'])['year_of_release'].max() # сгрупперуем данные по годам и платформам
min_year = games_top_sales_platform.groupby(['platform'])['year_of_release'].min()
life_platforms = max_year-min_year
print(life_platforms.mean())


# Как видно из расчетов, срок жизни платформ составляет около 10 лет.

# In[346]:


games_top_sales_platform.groupby('platform')['year_of_release'].nunique().mean()


# **Рассмотрим данные за актуальный период**

# Для последующих наших исследований, определим актуальный период рассмотрения. 

# Актуальный период определите самостоятельно в результате исследования предыдущих вопросов. 
# Рассмотрим данные за последние 5 лет. Это обусловлено несколькими факторами. Во-первых, в этот период можно увидеть более актуальные тенденции и изменения в индустрии игр, что позволит нам сделать более точный и надежный прогноз на 2017 год. Также нужно учесть, что использование данных за более ранние периоды может привести к тому, что мы будем работать с немного устаревшими данными, а в индустрии игр, в которых проиходят изменения каждый год, это может привести к недостоверному анализу.
# Т.к. средняя продолжительность жизни платформ в среднем около 7-10 лет. За это время приставка успевает набрать популярность и также потерять ее из-за выхода более новых платформ. И если взять период за посление 5 лет, то будут видны циклы жизни приставок до 2016 года.

# In[347]:


min_year = 2012
games_top_platform = games_top_sales_platform.query('year_of_release >= @min_year')


# Построим график распределния за актуальный период (2012-2016 года)

# In[348]:


games_top_platform.pivot_table(index='year_of_release', columns = 'platform', values='all_sales', aggfunc='sum').plot(grid=True, figsize=(12, 5))
plt.xlim(2011, 2017)
plt.xlabel('Год выпуска', fontsize=14)
plt.ylabel('Количество продаж', fontsize=14)
plt.title('Погодовые продажи на топ-платформах за актуальный период с 2012-2016 гг', fontsize=14)
plt.show()


# **Посмотрим какие платформы лидируют по продажам, какие растут, а какие падают.**

# На графике мы можем заметить, что продажи в этот период у 7 платформ стремительно уменьшались и у многих их них на момент 2016 года их показатель приближается к 0. В то время, как в 2013 году появляются новые платформы, такие как PlayStation 4 (PS4) и Xbox One (XOne), и до 2015 года продажи данных платформ увеличивались и после этого года стали немного уменьшаться. Также на графике мы видим, что такие платформы как DS и PSP полностью достигают 0 продаж. На момент 2016 года такие платформы как PlayStation 4 (PS4),  Xbox One (XOne) и Nintendo 3DS (3DS) являются более прибыльными на рынке. 

# **Построим график «ящик с усами» по глобальным продажам игр в разбивке по платформам**

# Построим диаграмму размаха по платфомам в рамках рассматриваемого актуального периода.

# In[349]:


plt.figure(figsize=(15,7))
sns.boxplot(data=games_top_platform, y = 'all_sales', x='platform')
plt.xlabel('Платформы', fontsize=14)
plt.ylabel('Количество продаж (млн копий)', fontsize=14)
plt.title('Диаграмма размаха общих продаж', fontsize=14)
plt.grid(True)
plt.show()


# In[350]:


games_top_platform.groupby('platform')['all_sales'].describe()


# Данная диагорамма позволяет визуально оценить характеристики распределения.
# Просмотрев общую диаграмму размаха мы увидели частые выбросы в диапазоне около 5 млн, и редкие с продажами в более 20 млн (видимо эта игра была очень популярная). Уберем эти выбросы и еще раз посмотрим на диаграмму размаха. Для этого построим 2 график по верхней границе максимального значения которое не является выбросом и ограничим большие выбросы.   
#    
# Самый большой межквартильный размах у пратформы PS4 равный 0.73-0.06=0.67. Найдем максимальное значение не являющееся выбросом. Умножим межквартильный размах на 1.5 и получим 1.005. И добавим получившееся значение к 3му квартилю 0.73+1.005=1.735.

# Применим метод ylim(y_min, y_max) для изменения масштаба по вертикальной оси. 

# In[351]:


plt.figure(figsize=(15,7))
sns.boxplot(data=games_top_platform, y = 'all_sales', x='platform')
plt.ylim(0, 2)
plt.xlabel('Платформы', fontsize=14)
plt.ylabel('Количество продаж (млн копий)', fontsize=14)
plt.title('Диаграмма размаха общих продаж', fontsize=14)
plt.grid(True)
plt.show()


# Рассмотрим самые продаваемые платформы. Границы данных платформ разные, но при этом медиана у всех платформ, кроме X360, не выходит за рамки 0.25 млн продаж. У пратформ PSP и DS не очень большое количество продаж по сравнению с другими платформами. Также больше всего стандартное отклонение у платформ X360 и PS4, это означает, что в их наборах данных присутвует больше аномалий или выбросов, нежели чем в других платформах.
# Медиана и размах у таких платформ как PS4, XOne и Wii примерно на одном уровне, и можно сказать, что у этих платформ, в отличии от DS, PSP и PC, есть намного больше игр, которые покупались намного чаще. В то время как у 3DS очень много выбрасов, что означает что у данной платформы есть игры, которые могли неожиданно хорошо продаваться.

# In[352]:


print('Среднее значение у топ платформ равно', games_top_platform['all_sales'].mean())
print('Медиана у топ платформ равна', games_top_platform['all_sales'].median())


# Cредние значения сильно отличается от медианы, что говорит нам о том, что в данных есть аномальные значения, которые и увеличивают среднее.

# **Посмотрим, как влияют на продажи внутри одной популярной платформы отзывы пользователей и критиков.**

# Для анализа возьмем платформу PS4, т.к. у этой платформы значительные продажи в 2016 году. Построим диаграмму рассеяния и посчитаем корреляцию между отзывами и продажами.

# In[353]:


games_top_platform[games_top_platform['platform']=='PS4'].plot(x='user_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True)
plt.xlabel('Оценка пользователей (максимум 10)', fontsize=14)
plt.ylabel('Количество продаж', fontsize=14)
plt.title('Влияние оценки пользователей на продажи PS4', fontsize=14)
plt.show()


# In[354]:


games_top_platform[games_top_platform['platform']=='PS4'].plot(x='critic_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True)
plt.xlabel('Оценка критиков (максимум 100)', fontsize=14)
plt.ylabel('Количество продаж', fontsize=14)
plt.title('Влияние оценки критиков на продажи PS4', fontsize=14)
plt.show()


# Найдем коэффициент корреляции Пирсона. Если с ростом оценки критиков или пользователей будут увеличиваться продажи, то коэффициент корреляции Пирсона будет положительный. Если при изменении одной из этих величины другая остаётся прежней, то коэффициент равен 0. И если рост одной величины связан с уменьшением другой, коэффициент отрицательный.

# In[355]:


games_ps4_users = games_top_platform[games_top_platform['platform']=='PS4']
games_ps4_users_no = games_ps4_users[games_ps4_users['user_score'] != -1]
games_ps4_cor1 = games_ps4_users_no['user_score'].corr(games_ps4_users_no['all_sales'])
display('Корреляция равна: {}'.format(games_ps4_cor1))


# In[356]:


games_ps4_critic = games_top_platform[games_top_platform['platform']=='PS4']
games_ps4_critic_no = games_ps4_critic[games_ps4_critic['critic_score'] != -1]
games_ps4_cor2 = games_ps4_critic_no['critic_score'].corr(games_ps4_critic_no['all_sales'])
display('Корреляция равна: {}'.format(games_ps4_cor2))


# Для того, чтобы более точно определить влияют ли оценки критиков и пользователей на продажи платформ, рассмотрим дополнительно такие популярные платформы как XOne, 3DS и PS3

# In[357]:


games_XOne_users = games_top_platform[games_top_platform['platform']=='XOne']
games_3DS_users = games_top_platform[games_top_platform['platform']=='3DS']
games_PS3_users = games_top_platform[games_top_platform['platform']=='PS3']
games_XOne_critic = games_top_platform[games_top_platform['platform']=='XOne']
games_3DS_critic = games_top_platform[games_top_platform['platform']=='3DS']
games_PS3_critic = games_top_platform[games_top_platform['platform']=='PS3']


# In[358]:


#посмотрим диаграммы рассеивания для платформ 
fig, ax = plt.subplots(nrows=3, ncols=2)
fig.suptitle('Влияние оценки пользователей и критиков на продажи разных платформ', fontsize=18, fontweight='bold')
fig.set_size_inches(17,17)

games_XOne_users.plot(ax=ax[0,0], x='user_score', y='all_sales', kind='scatter' , alpha=0.3, figsize=(16,5), grid=True, subplots=True)
games_XOne_critic.plot(ax=ax[0,1], x='critic_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True, subplots=True)
ax[0,0].set_title('Влияние оценки пользователей на продажи XOne')
ax[0,1].set_title('Влияние оценки критиков на продажи XOne')

games_3DS_users.plot(ax=ax[1,0], x='user_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True, subplots=True)
games_3DS_critic.plot(ax=ax[1,1], x='critic_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True, subplots=True)
ax[1,0].set_title('Влияние оценки пользователей на продажи 3DS')
ax[1,1].set_title('Влияние оценки критиков на продажи 3DS')

games_PS3_users.plot(ax=ax[2,0], x='user_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True, subplots=True)
games_PS3_critic.plot(ax=ax[2,1], x='critic_score', y='all_sales', kind='scatter', alpha=0.3, figsize=(16,5), grid=True, subplots=True)
ax[2,0].set_title('Влияние оценки пользователей на продажи PS3')
ax[2,1].set_title('Влияние оценки критиков на продажи PS3')


for ax in ax.flat:
    ax.set(xlabel='Оценка', ylabel='Количество продаж')

plt.show()


# Найдем корреляцию по всем значениям. Для начала рассмотрим платформу XOne

# In[359]:


#зависимость продаж от оценки пользователей
games_XOne_users_no = games_XOne_users[games_XOne_users['user_score'] != -1]
games_XOne_cor1 = games_XOne_users_no['user_score'].corr(games_XOne_users_no['all_sales']) 
display('Корреляция равна: {}'.format(games_XOne_cor1))
#зависимость продаж от оценки критиков
games_XOne_critic_no = games_XOne_critic[games_XOne_critic['critic_score'] != -1]
games_XOne_cor2 = games_XOne_critic_no['critic_score'].corr(games_XOne_critic_no['all_sales']) 
display('Корреляция равна: {}'.format(games_XOne_cor2))


# Корреляция для платформы 3DS:

# In[360]:


#зависимость продаж от оценки пользователей
games_3DS_users_no = games_3DS_users[games_3DS_users['user_score'] != -1]
games_3DS_cor1 = games_3DS_users_no['user_score'].corr(games_3DS_users_no['all_sales']) 
display('Корреляция равна: {}'.format(games_3DS_cor1))
#зависимость продаж от оценки критиков
games_3DS_critic_no = games_3DS_critic[games_3DS_critic['critic_score'] != -1]
games_3DS_cor2 = games_3DS_critic_no['critic_score'].corr(games_3DS_critic_no['all_sales']) 
display('Корреляция равна: {}'.format(games_3DS_cor2))


# Корреляция для платформы PS3:

# In[361]:


#зависимость продаж от оценки пользователей
games_PS3_users_no = games_PS3_users[games_PS3_users['user_score'] != -1]
games_PS3_cor1 = games_PS3_users_no['user_score'].corr(games_PS3_users_no['all_sales']) 
display('Корреляция равна: {}'.format(games_PS3_cor1))
#зависимость продаж от оценки критиков
games_PS3_critic_no = games_PS3_critic[games_PS3_critic['critic_score'] != -1]
games_PS3_cor2 = games_PS3_critic_no['critic_score'].corr(games_PS3_critic_no['all_sales']) 
display('Корреляция равна: {}'.format(games_PS3_cor2))


# Посмотрим на кореляции по всем платформам. 
# 
# Для **PS4** мы можем заметить, что кореляция между оценкой пользователей и продажами слабо отрицательная и равна -0.03. Данное значение очень близко к 0. Это говорит нам о том, линейная связь либо очень очень слабая либо отсутствует вовсе. Кореляция же между оценкой критиков и продажами равна 0.35. Это говорит там о том, что связь между параметрами умеренная.
# 
# У платформы **XOne** кореляция между оценкой пользователей и продажами равна -0.06. Это так же значение близко к 0, что показывает нам что завимости почти нет. Корреляция же с критиками равна 0.41, значит, это говорит нам о наличии связи, однако не слишком сильной.
# 
# Для платформы **3DS** кореляция с пользователями составляет 0.19, и поэтому между параметрами прямая линейная связь слабая. Кореляция с критиками равна 0.32. Данное значение говорит нам об умеренной зависимости между параметрами.
# 
# И наконец, у платформы **PS3** кореляция между оценкой пользователей и продажами отрицательная и равна -0.006. Значит, зависимости между параметрами почти нет. Кореляция же между оценкой критиков и продажами равна 0.33. Это говорит там о том, что с между параметрами прямая умеренная связь.

# Из этого можно сделать вывод, что между оценкой пользователей и продажами почти нет никакой взаимосвязи, т.к. коэффициент корреляции Пирсона почти во всех случаях очень близок к 0. В то время как между оценкой критиков и продажами существует  небольшая слабая связь между параметрами.

# **Соотнесем выводы с продажами игр на других платформах**

# In[362]:


games_top_sales_platform.groupby('platform')['all_sales'].describe()


# Чтобы сравнить наши платформы построим диаграмму размаха по 18 самым продаваемым платформам.

# In[363]:


plt.figure(figsize=(15,7))
sns.boxplot(data=games_top_sales_platform , x= 'platform' , y= 'all_sales' )
plt.xlabel('Платформы', fontsize=14)
plt.ylabel('Количество продаж (млн копий)', fontsize=14)
plt.title('Диаграмма размаха общих продаж', fontsize=14)
plt.grid(True)
plt.show()


# В данной диаграмме мы можем заметить аномальные выбромы которые достигают более 80 млн. Уберем эти выбросы и еще раз посмотрим на диаграмму размаха.

# Применим метод ylim(y_min, y_max) для изменения масштаба по вертикальной оси до значения 5 млн

# In[364]:


plt.figure(figsize=(15,7))
sns.boxplot(data=games_top_sales_platform , x= 'platform' , y= 'all_sales' )
plt.ylim(0, 5)
plt.xlabel('Платформы', fontsize=14)
plt.ylabel('Количество продаж (млн копий)', fontsize=14)
plt.title('Диаграмма размаха продаж', fontsize=14)
plt.grid(True)
plt.show()


# После изучения информации о продажах платформ, которые являюся более прибыльными на рынке в актувльный период (PS4, PS3, PC, XOne, 3DS и т.д.) с оставшимися, мы можем подвести небольшое сравнение. 
# 
# В данной выборке уже появились платформы NES и GB, у которых значение медианы выходит далеко за 1млн, и их размах превышает все остальные. Похоже игры на данные консоли были очень успешны. Также, у таких платформ как Wii, X360, у всей линейки PS, SNES, N64 и XOne большая часть значений, исключая выбросы, лежит в диапазоне до 2 млн.
# 
# У пратформ DS, PC и PSP не очень большое количество продаж по сравнению с другими платформами. Также больше всего стандартное отклонение у платформ NES и GB, это означает, что в наборе данных присутвует больше аномалий или выбросов, нежели чем в других платформах.
# 

# In[365]:


print('Среднее значение у актуальных платформ равно', games_top_platform['all_sales'].mean())
print('Медиана у актуальных платформ равна', games_top_platform['all_sales'].median())


# In[366]:


print('Среднее значение у оставшихся платформ равно', (2.622990+0.385795+0.362970+0.689905+2.561735+0.611412+0.579953+0.836987+0.313288)/9)
print('Медиана у оставшихся платформ равна', (1.180+0.160+0.150+0.270+1.375+0.260+0.230+0.320+0.150)/9)


# Медианы у обех групп сильно отличаются от средних значений, что говорит о наличии выбрасов, похоже в платформах присутсвуют игры, которые стали очень популярными и продаваемыми, по сравнению с другими играми отдельных пратформ. Также медиана и среднее значение у оставшихся групп больше, чем у актуальных платформ. Возможно на это повиляли такие платформы как NES и GB.

# **Посмотрим на общее распределение игр по жанрам**

# In[367]:


print(games_top_platform['genre'].unique())


# In[368]:


games_genre = games_top_platform.pivot_table(index='genre', values='all_sales', aggfunc='median')
games_genre = games_genre.sort_values(by='all_sales', ascending=True)
print(games_genre)


# In[369]:


games_genre.plot.barh(grid=True, figsize=(15, 7))
plt.xlabel('Количество продаж', fontsize=14)
plt.ylabel('Жанр', fontsize=14)
plt.title('Популярность жанров на различных платформах', fontsize=14)
plt.show()


# Самыми прибыльными жанрами являются Shooter, Sports, Role-Playing, Platform и Fighting. Но топ удерживают игры в стиле Shooter. Самыми не прибыльными являются игры в жанре Puzzle и Adventure. Большинсво жанров с высокими пролажами - это активные  и зрелищные игры, направленные по большей части на мужской пол, что разумно, т.к. скорее всего подавляющее количество игроков именно мужского пола. Спокойные же игры возможно не доставляют таких эмоций от игры, как игры с высокими продажами, поэтому продажи у них и меньше.

# В 3 шаге работы мы проведили исследовательский анализ данных.  
# Сначала, мы посмотрели, сколько игр выпускалось в разные годы. Как  оказалось, примерно 2008-2009 года стали самыми плодотворными на выпуск игр. Что касается же более ранних годов, то до 1993 года игр выпускалось в разы меньше, и после этого периода начался рост производсва игр.   
# Далее мы посмотрели, как менялись продажи по платформам. И выбрали платформы с наибольшими суммарными продажами (продажи которых превышали 150 млн копий) и построили график распределения по годам. Заметили тенденцию жизненного цикла платформ, что в среднем они  живут около 5 лет. В первые годы появления, продажи идут на увеличение, и по прошествии нескольких лет продажи начинают уменьшаться т.к. приближается появление новых платформ. И после появления новых, продажи постепенно исчезают и сремятся к 0.   
# После, мы определили актуальный период для нашего исследования, и решили рассмотривать развитие платформ за последние 5 лет. За этот период можно увидеть более актуальные тенденции и изменения в индустрии игр, что позволит нам сделать более точный и надежный прогноз на 2017 год. За это время приставка успевает набрать популярность и также потерять ее из-за выхода более новых платформ. И если взять период за посление 5 лет, то будут видны циклы жизни приставок до 2016 года.   
# После мы построили график распределения и посмотрели, какие платформы были актуальными на этот период времени, и какие из них приносили самые большие продажи. В итоге, самые большие продажи принесла пратформа PS4, но и XOne  тоже показала хорошие показатели.   
# Далее мы построили график «ящик с усами» по глобальным продажам игр в разбивке по топ-5 платформам. Ими оказались "PS4", "XOne", "3DS", "PC" и "PS3". Как показал график, в наших данных присутвует больше количество аномалий или выбросов. Можно считать что у каждой платформы были какие то игры, которые стали популярными у польщрвателей и принесли большие продажи.     
# Также, мы посмотрели, как влияют на продажи внутри платформы PS4 отзывы пользователей и критиков. Исследование мы провели при помощи нахождения коэффициента кореляции. Как оказалось, коэффициент кореляции между оценкой пользователей и количеством продаж очень близок к 0 и равен -0.06. Это означает, что линейная связь слабая либо отсутствует вовсе. Коэффициент кореляции между оценкой критиков и количеством продаж же оказался равен 0.34. Данное значение говорит о наличии связи, однако не слишком сильной.   
# В добавок, мы сравнили продажи наших топ-5 платформ с другими платформами, и выявили что медианы у обех групп сильно отличаются от средних значений, что говорит о наличии выбрасов, похоже в платформах присутсвуют игры, которые стали очень популярными и продаваемыми, по сравнению с другими играми отдельных пратформ. В данной выборке появились платформы NES и GB, у которых значение медианы выходит далеко за 1млн, и их размах превышает все остальные. Также медиана и среднее значение у оставшихся групп больше, чем у топ-5. Возможно на это как раз таки повиляли такие платформы как NES и GB. Также, у таких платформ как Wii, X360, у всей линейки PS, SNES, N64 и XOne большая часть значений, исключая выбросы, лежит в диапазоне до 2 млн.   
# И в завершении, мы посмотрели на общее распределение игр по жанрам и выявили, что самыми прибыльными жанрами являются Shooter, Sports, Platform, Role-Playing и Fighting. 

# ### Шаг 4. Составим портрет пользователя каждого региона

# Определите для пользователя каждого региона (NA, EU, JP):
# - Самые популярные платформы (топ-5).
# - Самые популярные жанры (топ-5).

# Топ-5 самых популярных платформ в Северной Америке:

# Создадим для каждой категории стран подкатегорию платформ 'другие', в которую будут входить те платформы, которые не вошли в топ-5

# In[370]:


#таблица платформ для Северной Америки
platform_na = games_top_platform.pivot_table(index='platform', values='na_sales', aggfunc ='sum').sort_values('na_sales', ascending=False)
#добавим категорию 'другие' и объединим в нее все платформы, которые не попали в топ-5
other_sum = platform_na['na_sales'].sum() - platform_na.head()['na_sales'].sum()
platform_na_other = platform_na.head().T
platform_na_other['другие'] = other_sum
platform_na_other = platform_na_other.T

#таблица платформ для Европы
platform_eu = games_top_platform.pivot_table(index='platform', values='eu_sales', aggfunc ='sum').sort_values('eu_sales', ascending=False)
#добавим категорию 'другие' и объединим в нее все платформы, которые не попали в топ-5
other_sum = platform_eu['eu_sales'].sum() - platform_eu.head()['eu_sales'].sum()
platform_eu_other = platform_eu.head().T
platform_eu_other['другие'] = other_sum
platform_eu_other = platform_eu_other.T

#таблица платформ для Японии
platform_jp = games_top_platform.pivot_table(index='platform', values='jp_sales', aggfunc ='sum').sort_values('jp_sales', ascending=False)
#добавим категорию 'другие' и объединим в нее все платформы, которые не попали в топ-5
other_sum = platform_jp['jp_sales'].sum() - platform_jp.head()['jp_sales'].sum()
platform_jp_other = platform_jp.head().T
platform_jp_other['другие'] = other_sum
platform_jp_other = platform_jp_other.T


# Построим круговые графики для Топ-5 самых популярных платформ для каждой категории стран:

# In[371]:


fig, ax = plt.subplots(nrows=1, ncols=3)
fig.suptitle('Распределение популярности платформ в разных регионах', fontsize=18, fontweight='bold')
fig.set_size_inches(20,6)

platform_na_other.plot(x = 'platform', y = 'na_sales', kind = 'pie', autopct='%1.1f%%',legend=False, figsize=(20,8), grid=True, ax=ax[0], subplots=True)
platform_eu_other.plot(x = 'platform', y = 'eu_sales', kind = 'pie', autopct='%1.1f%%', legend=False, figsize=(20,8), grid=True, ax=ax[1], subplots=True)
platform_jp_other.plot(x = 'platform', y = 'jp_sales', kind = 'pie', autopct='%1.1f%%', legend=False, figsize=(20,8), grid=True, ax=ax[2], subplots=True)

ax[0].set_title('Топ-5 по популярности платформ для Северной Америки')
ax[1].set_title('Топ-5 по популярности платформ для Европы')
ax[2].set_title('Топ-5 по популярности платформ для Японии')

plt.show()


# Топ 5 платформ:
#  - Северной Америке - X360, PS4, PS3, XOne, 3DS. Больше всего используют платформу X360, целых 25.8%.
#  - Европе - PS4, PS3, X360, XOne, 3DS. По сравнению с Северной Америкой больше всего платформ PS4 с 30.0%, а пратформа X360 занимает же 3 место с 15.8%
#  - Японии - 3DS, PS3, PS4, PSP, DS. В Японии же у пользователей консолей совсем другие предпочтения. Подавляющее большинсво людей пользуются платформой 3DS - целых 55.4%

# Теперь сравним жанры в разных регионах
# Создадим также подкатегорию 'другие' для жанров, которые не вошли в топ-5

# In[372]:


#таблица жанров для Северной Америки
genre_na = games_top_platform.pivot_table(index='genre', values='na_sales', aggfunc ='sum').sort_values('na_sales', ascending=False)
#добавим категорию 'другие' и объединим в нее все жанры, которые не попали в топ-5
other_sum = genre_na['na_sales'].sum() - genre_na.head()['na_sales'].sum()
genre_na_other = genre_na.head().T
genre_na_other['другие'] = other_sum
genre_na_other = genre_na_other.T

#таблица жанров для Европы
genre_eu = games_top_platform.pivot_table(index='genre', values='eu_sales', aggfunc ='sum').sort_values('eu_sales', ascending=False)
#добавим категорию 'другие' и объединим в нее все жанры, которые не попали в топ-5
other_sum = genre_eu['eu_sales'].sum() - genre_eu.head()['eu_sales'].sum()
genre_eu_other = genre_eu.head().T
genre_eu_other['другие'] = other_sum
genre_eu_other = genre_eu_other.T

#таблица жанров для Японии
genre_jp = games_top_platform.pivot_table(index='genre', values='jp_sales', aggfunc ='sum').sort_values('jp_sales', ascending=False)
#добавим категорию 'другие' и объединим в нее все жанры, которые не попали в топ-5
other_sum = genre_jp['jp_sales'].sum() - genre_jp.head()['jp_sales'].sum()
genre_jp_other = genre_jp.head().T
genre_jp_other['другие'] = other_sum
genre_jp_other = genre_jp_other.T


# Построим графики распределения популярности жанров в разных регионах

# In[373]:


fig, ax = plt.subplots(nrows=1, ncols=3)
fig.suptitle('Распределение популярности жанров в разных регионах', fontsize=18, fontweight='bold')
fig.set_size_inches(20,6)

#platform_na = games_top_platform.groupby('genre')['na_sales'].sum().sort_values(ascending=False).head(5)
genre_na_other.plot(x = 'genre', y = 'na_sales', kind = 'pie', autopct='%1.1f%%', legend=False, figsize=(20,8), grid=True, ax=ax[0], subplots=True)

#platform_eu = games_top_platform.groupby('genre')['eu_sales'].sum().sort_values(ascending=False).head(5)
genre_eu_other.plot(x = 'genre', y = 'eu_sales', kind = 'pie', autopct='%1.1f%%', legend=False, figsize=(20,8), grid=True, ax=ax[1], subplots=True)

#platform_jp = games_top_platform.groupby('genre')['jp_sales'].sum().sort_values(ascending=False).head(5)
genre_jp_other.plot(x = 'genre', y = 'jp_sales', kind = 'pie', autopct='%1.1f%%', legend=False, figsize=(20,8), grid=True, ax=ax[2], subplots=True)

ax[0].set_title('Топ-5 по популярности жанров для Северной Америки')
ax[1].set_title('Топ-5 по популярности жанров для Европы')
ax[2].set_title('Топ-5 по популярности жанров для Японии')

plt.show()


# Топ 5 жанров:
#  - Северной Америке - Action, Schooter, Sports, Role-Playing, Misc. Больше всего играют в игры жанра Action, целых 30.4%.
#  - Европе - Action, Schooter, Sports, Role-Playing, Racing. В Европе картина примно похожая, за искоючением того, что вместо Misc европейцы больше предпочитают Racing. А жанр Action также лидирует с 31.6%
#  - Японии - Role-Playing, Action, Simulation, Misc, Fighting. В Японии, как и при выборе платформ, выбор жанров игр также другой. Целых 35.9% игр в жанре Role-Playin. Также, в топе есть жанры, такие как Simulation и Fighting, которые не входили в топ-5 ни у Северной Америки ни у Европы.

# **Рейтинг по платформам:**
# в Северной Америке - X360
# в Европе - PS4
# в Японии - 3DS
#    
# **Рейтинг по жанрам:**
# в Северной Америке - Action
# в Европе - Action
# в Японии - Role-Playing

# У Северной Америки и Европы примерно похожи вкусы на платформы и жанры игр, в то время как у Японии совершенно другие лидеры. Возможно, что японцы больше любят отечественные платформы, поэтому среди топа мы встречаем платформы произведенные только в Японии. Так что возможно они заинтересованы в локализации своих продуктов. Также, т.к. данные платформы произведены в Японии, они являются более доступными 

# **Высним, влияет ли рейтинг ESRB на продажи в отдельном регионе**

# Рейтинг от организации ESRB в Северной Америке:

# In[374]:


rating_na = games_top_platform.groupby('rating')['na_sales'].sum().sort_values(ascending=False)
rating_na.plot(x = 'rating', y = 'na_sales', kind = 'bar', figsize=(20,8), grid=True)
plt.xlabel('Рейтинг ESRB', fontsize=14)
plt.ylabel('Продажи в Северной Америке (млн проданных копий)', fontsize=14)
plt.title('Рейтинг от организации ESRB в Северной Америке', fontsize=14)
plt.grid(True)
plt.show()


# In[375]:


print(rating_na)


# В Северной Америке самые высокие показатели продаж у жанра M («Для взрослых»: Подходит для лиц старше 17 лет) а именно 225млн. Остальные жанры менее популярные более чем в 2 раза.

# Рейтинг от организации ESRB в Европе:

# In[376]:


rating_eu = games_top_platform.groupby('rating')['eu_sales'].sum().sort_values(ascending=False)
rating_eu.plot(x = 'rating', y = 'eu_sales', kind = 'bar', figsize=(20,8), grid=True)
plt.xlabel('Рейтинг ESRB', fontsize=14)
plt.ylabel('Продажи в Европе (млн проданных копий)', fontsize=14)
plt.title('Рейтинг от организации ESRB в Европе', fontsize=14)
plt.grid(True)
plt.show()


# In[377]:


print(rating_eu)


# Данные в Европе получились примерно похожими на данные в Северной Америке. Рейтинг М также занимает первое место по продажам с показаиелем почти 190 млн. Также можно заметить, что 4 и 5 место поменялись местами, и теперь рейтинг Т немного обгоняет рейтинг Е10+.

# Рейтинг от организации ESRB в Японии:

# In[378]:


rating_jp = games_top_platform.groupby('rating')['jp_sales'].sum().sort_values(ascending=False)
rating_jp.plot(x = 'rating', y = 'jp_sales', kind = 'bar', figsize=(20,8), grid=True)
plt.xlabel('Рейтинг ESRB', fontsize=14)
plt.ylabel('Продажи в Европе (млн проданных копий)', fontsize=14)
plt.title('Рейтинг от организации ESRB в Японии', fontsize=14)
plt.grid(True)
plt.show()


# In[379]:


print(rating_jp)


# Объединим графики для более удобного просмотра

# В Японии самые высокие рейтинги у игр, в которых жанры неопределенны, и далее, с сильным спадом популярности, идут жанры E, T и M. Т.к. огранизация ESRB, это организация, которая присваивает рейтинги видеоиграм в Северной и Центральной Америке, скорее всего это и является причиной, что многие популярные игры в Японии не имеют этого рейтинга. Также, в Японии существует своя организация для определения рейтинга видеоигр под названием CERO.

# In[380]:


fig, ax = plt.subplots(nrows=1, ncols=3)
fig.suptitle('Топ-5 рейтингов от организации ESRB в разных регионах', fontsize=18)
fig.set_size_inches(25,8)

rating_na = games_top_platform.groupby('rating')['na_sales'].sum().sort_values(ascending=False)
rating_na.plot(x = 'rating', y = 'na_sales', kind = 'bar', color='blue', figsize=(20,8), grid=True, ax=ax[0], subplots=True)

rating_eu = games_top_platform.groupby('rating')['eu_sales'].sum().sort_values(ascending=False)
rating_eu.plot(x = 'rating', y = 'eu_sales', kind = 'bar', color='orange', figsize=(20,8), grid=True, ax=ax[1], subplots=True)

rating_jp = games_top_platform.groupby('rating')['jp_sales'].sum().sort_values(ascending=False)
rating_jp.plot(x = 'rating', y = 'jp_sales', kind = 'bar', color='green', figsize=(20,8), grid=True, ax=ax[2], subplots=True)

ax[0].set_title('Топ-5 рейтингов от организации ESRB в Северной Америке')
ax[1].set_title('Топ-5 рейтингов от организации ESRB в Европе')
ax[2].set_title('Топ-5 рейтингов от организации ESRB в Японии')


for ax in ax.flat:
    ax.set(xlabel='Рейтинг ESRB', ylabel='Количество продаж') 
    
plt.show()


# **Рейтинг от организации ESRB:**
# в Северной Америке - M
# в Европе - M
# в Японии - unknow
#    
# Как мы видим, из полученных графиков, в Северной Америке и Европе игроки предпочитают играть в игры жанра М, остальные же жанры менее популярные. В Японии у большинсва популярных игр жанр не определен. 
#   

# В 4 шаге работы мы составили портрет пользователя каждого региона. Мы определили для пользователя каждого региона (Северной Америки, Европы, Японии) самые популярные платформы и самые популярные жанры игр.  
# Вот данные, которые мы получили (первые места по каждой категории):  
#  - Рейтинг по **платформам**: в Северной Америке - X360 в Европе - PS4 в Японии - 3DS
#  - Рейтинг по **жанрам**: в Северной Америке - Action в Европе - Action в Японии - Role-Playing
#  - Рейтинг от **организации ESRB**: в Северной Америке - M в Европе - M в Японии - unknow
#    
# Как показало исследование у Северной Америки и Европы примерно похожи результаты на платформы и жанры игр, в которые предпочитают играть пользователи, в то время как у Японии совершенно другие лидеры. 

# ### Шаг 5. Проверка гипотез

# Нам необходимо проверить 2е гипотезы:
#  - Средние пользовательские рейтинги платформ Xbox One и PC одинаковые
#  - Средние пользовательские рейтинги жанров Action (англ. «действие», экшен-игры) и Sports (англ. «спортивные соревнования») разные.

# Для того, чтобы проверить первую гипотезу, необходимо сформулировать нулевую и альтернативную гипотезы.   
# Нулевая гипотеза: средние пользовательские рейтинги платформ Xbox One и PC одинаковые.   
# Альтернативная гипотеза: средние пользовательские рейтинги между платформами Xbox One и PC разные.

# In[381]:


# Выбираем нужные платформы
platform_xbox = games_top_platform[games_top_platform['platform'] == 'XOne']
platform_pc = games_top_platform[games_top_platform['platform'] == 'PC']

# Фильтруем строки с отсутствующими или некорректными оценками (например, -1)
platform_xbox_no = platform_xbox[platform_xbox['user_score'] != -1]
platform_pc_no = platform_pc[platform_pc['user_score'] != -1]

# Преобразуем user_score к числовому типу и удаляем строки, где преобразование не удалось
platform_xbox_user_score = pd.to_numeric(platform_xbox_no['user_score'], errors='coerce').dropna()
platform_pc_user_score = pd.to_numeric(platform_pc_no['user_score'], errors='coerce').dropna()

# Задаём уровень значимости
alpha = 0.05

# Проводим t-test для двух выборок
results = st.ttest_ind(platform_xbox_user_score, platform_pc_user_score)

print(f'p-value: {results.pvalue}')

# Проверяем p-value
if results.pvalue < alpha:
    print('Отвергаем нулевую гипотезу')
else:
    print('Нет оснований отвергнуть нулевую гипотезу')


# In[382]:


print('Среднее значение рейтинга пользователей Xbox One',platform_xbox['user_score'].mean())
print('Среднее значение рейтинга пользователей PC',platform_pc['user_score'].mean())


# Т.к. значение p-value равное 0.55 больше уровня значимости 0.05, то у нас нет оснований отвергнуть нулевую гипотезу. Из этого следует, что средние значения рейтинга пользователей между платформами Xbox One и PC примерно одинаковы. Это также подтвердается выведенными средними значениями.

# Для того, чтобы проверить вторую гипотезу, также сформулируем нулевую и альтернативную гипотезы.   
# Нулевая гипотеза: средние пользовательские рейтинги жанров Action (англ. «действие», экшен-игры) и Sports (англ. «спортивные соревнования») одинаковые.   
# Альтернативная гипотеза: средние пользовательские рейтинги жанров Action (англ. «действие», экшен-игры) и Sports (англ. «спортивные соревнования») разные.

# In[383]:


# Выбираем нужные жанры
genre_action = games_top_platform[games_top_platform['genre'] == 'Action']
genre_sports = games_top_platform[games_top_platform['genre'] == 'Sports']

# Фильтруем строки с отсутствующими или некорректными оценками (например, -1)
genre_action_no = genre_action[genre_action['user_score'] != -1]
genre_sports_no = genre_sports[genre_sports['user_score'] != -1]

# Преобразуем user_score к числовому типу и удаляем строки, где преобразование не удалось
genre_action_user_score = pd.to_numeric(genre_action_no['user_score'], errors='coerce').dropna()
genre_sports_user_score = pd.to_numeric(genre_sports_no['user_score'], errors='coerce').dropna()

# Задаём уровень значимости
alpha = 0.05

# Проводим t-test для двух выборок
results = st.ttest_ind(genre_action_user_score, genre_sports_user_score)

print(f'p-value: {results.pvalue}')

# Проверяем p-value
if results.pvalue < alpha:
    print('Отвергаем нулевую гипотезу')
else:
    print('Нет оснований отвергнуть нулевую гипотезу')


# In[384]:


print('Среднее значение пользовательского рейтинга жанра Action',genre_action['user_score'].mean())
print('Среднее значение пользовательского рейтинга жанра Sports',genre_sports['user_score'].mean())


# Полученное значение p-value меньше заданного уровня значимости и стремится к 0, поэтому можно отвергнуть нулевую гипотезу. Есть основания говорить, что средние пользовательские рейтинги жанров Action и Sports разные. Это так же видно из выведенных значений.

# В данном шаге мы проверили две гипотезы, используя специальный метод для проверки гипотезы о равенстве среднего двух генеральных совокупностей по взятым из них выборкам. Уровень значимости задали 0.05. Нулевая гипотеза звучала как «между средними значениями двух совокупностей нет разницы, они равны», а альтернативная — «средние значения двух совокупностей не равны, или разные».    
# Как оказалось, после проверок гипотез, средние значения рейтинга пользователей между платформами Xbox One и PC были примерно одинаковы, а средние пользовательские рейтинги у жанров Action и Sports разные.

# ### Шаг 6. Общий вывод

# В данной работе мы рассматривали информация о продажах компьютерных игр, их оценке пользователями и экспертами, их жанры и платформы. Нам передали данные с 1980 по 2017 года. Нашей задачей было провести исследование и выявить закономерности, которые влияют на успешность игры. Благодаря этому мы сможем сделать ставку на потенциально популярный продукт и спланировать рекламные кампании в будущем 2017 году.  
#   
# Сначала, мы открыли файл с данными и изучили общую информацию о датасете. После изучения мы увидели, что в данных присутсвуют пропуски, которые в дальнейшем мы обработали или заменили. Также в некоторых столбцах мы заменили тип данных на корректный.  
#   
# После мы произвели предобработку исходных данных, чтобы наш анализ болле точно отражал действительность. 
# Необходимо было заменить названия столбцов и привести их к нижнему регистру. Проверили данные на наличие пропусков и выявили их в 6-и столбцах. Впоследсвии мы их либо удалили, потому что произвести логическую замену было невозможно, либо заменили на 'заглушки',т.к. для расчетов нам необходимо было закрыть пропуски.Также проверили данные на наличие полных дубликатов и неявных дубликатов, впоследствии, убрав лишнее. И в конце добавили столбец с суммарными продажами по каждой игре.  
#   
# Далее мы проведили исследовательский анализ данных. Сначала, посмотрели, сколько игр выпускалось в разные годы. Как оказалось, примерно 2008-2009 года стали самыми плодотворными на выпуск игр. До 1993 года произовдсво игр было не большим, но после этого года количество игр резко начало увеличиваться.  
#   
# Потом мы посмотрели, как менялись продажи по платформам. Выбрали платформы с наибольшими суммарными продажами (продажи которых превышали 150 млн копий) и построили график распределения по годам. Заметили тенденцию жизненного цикла платформ, что в среднем они живут около 5-10 лет. В первые годы появления, продажи идут на увеличение, и по прошествии нескольких лет продажи начинают уменьшаться т.к. приближается появление новых платформ. И после появления новых, продажи постепенно исчезают и сремятся к 0.  
#    
# Вдобавок, мы определили, что актуальный период нашего исследования равен 5 годам. За этот период можно увидеть более актуальные тенденции и изменения в индустрии игр, что позволяет нам сделать более точный и надежный прогноз на 2017 год. Также мы учли, что использование данных за более ранние периоды может привести к тому, что мы будем работать с немного устаревшими данными, а в индустрии игр, в которых проиходят изменения каждый год, это может привести к недостоверному анализу.   
#   
# После мы построили график распределения и увидели, какие платформы были актуальными на этот период времени, и какие из них приносили самые большие продажи. В итоге, самые большие продажи принесла пратформа PS4, но и XOne тоже показала хорошие показатели. Кроме того, мы построили график «ящик с усами» по глобальным продажам игр в разбивке по платформам за актуальный период. Как показал график, в наших данных присутвует большое количество аномалий или выбросов. Можно считать, что у платформ есть какие-то игры, которые могли неожиданно хорошо продаваться и принести большие продажи. 
# 
# Более того, мы посмотрели, как влияют на продажи внутри платформ таких как PS4, XOne, 3DS и PS3 отзывы пользователей и критиков. Исследование мы провели при помощи нахождения коэффициента кореляции или коэффициента Пуассона. Как оказалось, коэффициент  кореляции между оценкой пользователей и количеством продаж у платформ: PS4 равен -0.03, XOne равен -0.06, 3DS равен 0.19, PS3 равен -0.005. И также коэффициент кореляции между оценкой критиков и количеством продаж у платформ: PS4 равен 0.35, XOne равен 0.41, 3DS равен 0.32, PS3 равен 0.33. Из этого можно сделать вывод, что между оценкой пользователей и продажами почти нет никакой взаимосвязи, т.к. коэффициент корреляции Пирсона почти во всех случаях очень близок к 0. В то время как между оценкой критиков и продажами существует небольшая слабая связь между параметрами.
# 
# Также мы сравнили продажи наших платформ за актуальный период с другими платформами, и выявили что медианы у обех групп сильно отличаются от средних значений. Похоже в платформах присутсвуют игры, которые стали очень популярными и продаваемыми, по сравнению с другими играми отдельных пратформ.
# 
# И в завершении, мы посмотрели на общее распределение игр по жанрам и выявили, что самыми прибыльными жанрами являются Shooter, Sports, Platform, Role-Playing и Fighting. Самыми не прибыльными являются игры в жанре Puzzle и Adventure. 
# 
# Кроме всего прочего, мы составили портрет пользователя каждого региона (Северной Америки, Европы, Японии) и определили самые популярные платформы и самые популярные жанры игр.   
#    
# **Топ 5 платформ:**   
#  - Северная Америка - X360, PS4, PS3, XOne, 3DS
#  - Европа - PS4, PS3, X360, XOne, 3DS
#  - Япония - 3DS, PS3, PS4, PSP, DS
#     
# **Топ 5 жанров:**   
#  - Северная Америка - Action, Schooter, Sports, Role-Playing, Misc
#  - Европа - Action, Schooter, Sports, Role-Playing, Racing
#  - Япония - Role-Playing, Action, Simulation, Misc, Fighting
#    
# У Северной Америки и Европы примерно похожи вкусы на платформы и жанры игр, в то время как у Японии совершенно другие лидеры. Возможно, что японцы больше любят или стремятся использовать только отечественные платформы, потому что среди их топа мы встречаем платформы произведенные только в Японии.  
#   
# Также мы составили топ рейтинг от организации ESRB в разных регионах   
#   
# **Топ рейтинг от организации ESRB:** 
#  - Северная Америка - М
#  - Европа - М
#  - Япония - unknow
#   
# Как мы видим, в Северной Америке и Европе игроки предпочитают играть в игры жанра М («Для взрослых»: Подходит для лиц старше 17 лет), остальные же жанры менее популярные. В Японии же у большинсва популярных игр жанр не определен. Возможно это связано с тем, что ESRB это американо-канадская организация ориентированная на игры в Америке и Канаде. 
#    
# И в завершении, мы проверили две гипотезы о равенстве двух генеральных совокупностей. Как оказалось, в первой гипотезе о равенстве средних пользовательских рейтингов платформ Xbox One и PC нет оснований отвергнуть нулевую гипотезу, и это означает что средние значения рейтинга примерно одинаковы. Во второй же гипотезе наоборот, мы отвергаем нулевую гипотезу, и у нас появляются основания говорить, что средние пользовательские рейтинги жанров Action и Sports разные. Это так же видно из выведенных значений.
#    
# По итогам можно сделать прогноз на 2017 год в игровой индустрии:   
#    
# Самой популярной платформой на рынке в мире на следующий год можно считать PS4, т.к. в нее играют и в Северной Америке и в Европе и в Японии, в то время как у Xbox One тоже хорошие показатели продаж, но на японский рынок она не ориентирована.
# 
# Предпочтительнее игры в жанре Action, Shooter и Role-Playing, т.к. большинство пользователей склоняются именно к ним. 
# 
# А вот что касается категории игры, то предпочтительнее игры с рейтингом М от организации ESRB (М - «Для взрослых»: Материалы игры не подходят для подростков младше 17 лет), т.к. именно эта возрастная категория пользуется большим спросом на рынке.
# 

# In[ ]:




